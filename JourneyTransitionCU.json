{
  "openapi": "3.0.0",
  "info": {
    "title": "CommandCenter Transitions API",
    "version": "1.0.0",
    "description": "API for creating and updating transitions in Zoho CommandCenter journeys."
  },
  "paths": {
    "/commandcenter/v1/journeys/{journey_id}/transitions": {
      "post": {
        "operationId": "post_commandcenter_v1_journeys_journey_id_transitions",
        "summary": "Create a new transition that connects two stages within a journey, triggered either by a signal or after a specified wait time.",
        "tags": [
          "Transitions"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TransitionPayload"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "description": "Creates a new transition that connects two stages within a journey. The transition can be triggered either by an incoming signal or after a specified wait time.",
        "parameters": [
          {
            "name": "journey_id",
            "in": "path",
            "description": "ID of the journey",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ]
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/transitions/{transition_id}": {
      "put": {
        "summary": "Update an existing transition in a journey.",
        "description": "Allows updating a transition’s name, description, stages, wait parameters, triggers, logs, criteria, and identifiers. Bulk updates are not supported.",
        "parameters": [
          {
            "name": "journey_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateTransitionPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateTransition": {
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transition"
            },
            "description": "List of transition objects to be created. Currently, only one transition can be created per request."
          }
        }
      },
      "Transition": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StandardTransition"
          },
          {
            "$ref": "#/components/schemas/WaitTransition"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/StandardTransition",
            "wait": "#/components/schemas/WaitTransition"
          }
        }
      },
      "SignalTrigger": {
        "type": "object",
        "properties": {
          "signal": {
            "type": "object",
            "properties": {
              "api_name": {
                "type": "string"
              },
              "service_org": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              },
              "signal_props": {
                "type": "object",
                "properties": {
                  "module": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the module that contains the layout and field referenced by the signal."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "layout": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Layout ID of the associated module. If this field is provided, the 'type' field should also be specified in the parent 'signal_props' object to indicate how the layout applies (either 'any' or 'specific')."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "field": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the field present in the module defined by the chosen layout type."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "from_module": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Defines the source module. If used, 'to_module' should also be specified."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "to_module": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Defines the target module. Must be used with 'from_module' to establish mapping."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "any",
                      "specific"
                    ],
                    "description": "Layout behavior type — must be 'any' or 'specific' if layout is present."
                  }
                }
              }
            },
            "required": [
              "api_name",
              "service_org"
            ]
          }
        },
        "required": [
          "signal"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "message": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "StandardTransition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnifiedTransitionBase"
          }
        ],
        "required": [
          "name",
          "type",
          "from_stage",
          "to_stage"
        ]
      },
      "WaitTransition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnifiedTransitionBase"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "object",
                "required": [
                  "execute_on"
                ],
                "properties": {
                  "execute_on": {
                    "type": "object",
                    "required": [
                      "period",
                      "time_unit"
                    ],
                    "properties": {
                      "period": {
                        "type": "integer"
                      },
                      "time_unit": {
                        "type": "string",
                        "enum": [
                          "minutes",
                          "hours",
                          "days",
                          "weeks"
                        ],
                        "description": ""
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "required": [
          "name",
          "type",
          "from_stage",
          "to_stage"
        ]
      },
      "UpdateTransition": {
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/UpdateTransitionSchema"
            },
            "description": "Transitions."
          }
        }
      },
      "StandardUpdateTransition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnifiedTransitionBase"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "object",
                "properties": {
                  "triggers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TransitionTrigger"
                    },
                    "nullable": true
                  },
                  "logs": {
                    "type": "array",
                    "description": "Contains log actions to be executed with this transition. Each log must include a name, type, and value.",
                    "items": {
                      "$ref": "#/components/schemas/TransitionLogEntry"
                    },
                    "nullable": true
                  },
                  "transition_criteria": {
                    "type": "object",
                    "description": "This field is currently not supported in version 1 of the API.",
                    "properties": {
                      "criteria": {
                        "$ref": "#/components/schemas/Criteria"
                      }
                    },
                    "nullable": true
                  },
                  "precedence_order": {
                    "type": "integer",
                    "description": "Defines the execution order for this transition relative to others."
                  }
                }
              }
            }
          }
        ]
      },
      "WaitUpdateTransition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnifiedTransitionBase"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "object",
                "properties": {
                  "execute_on": {
                    "type": "object",
                    "properties": {
                      "period": {
                        "type": "integer"
                      },
                      "time_unit": {
                        "type": "string",
                        "enum": [
                          "minutes",
                          "hours",
                          "days",
                          "weeks"
                        ],
                        "description": ""
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateTransitionSchema": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StandardUpdateTransition"
          },
          {
            "$ref": "#/components/schemas/WaitUpdateTransition"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "standard": "#/components/schemas/StandardUpdateTransition",
            "wait": "#/components/schemas/WaitUpdateTransition"
          }
        }
      },
      "TransitionTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the object or entity."
          },
          "_delete": {
            "type": "boolean",
            "description": "If true, deletes the object it is associated with. Requires the 'id' field."
          },
          "criteria": {
            "type": "object",
            "properties": {
              "criteria": {
                "$ref": "#/components/schemas/Criteria",
                "description": "Defines the logical structure of conditions used to evaluate a trigger. Set to null to delete."
              }
            },
            "description": "Defines the logical structure of conditions used to evaluate a trigger. Set to null to delete."
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identifier"
            },
            "description": "List of identifiers used to map data between CRM and system."
          },
          "add_identifiers_to_similar_triggers": {
            "type": "boolean",
            "description": "If true, identifiers will be added to similar triggers sharing the same criteria."
          },
          "signal": {
            "$ref": "#/components/schemas/SignalTrigger"
          }
        }
      },
      "InvalidFieldError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "INVALID_DATA",
              "MANDATORY_NOT_FOUND"
            ],
            "description": "Error code classifying the nature of the error."
          },
          "message": {
            "type": "string",
            "description": "Detailed explanation of the error."
          },
          "status": {
            "type": "string",
            "enum": [
              "error"
            ],
            "description": "Indicates the success or failure of an operation."
          },
          "details": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "api_name": {
                    "type": "string",
                    "description": "API name of the field or object."
                  },
                  "json_path": {
                    "type": "string",
                    "description": "Json path."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "resource_path_index": {
                    "type": "string",
                    "description": "Index of the element in the resource path where the error occurred."
                  }
                }
              }
            ],
            "description": "Contains additional configuration for the transition including triggers, logs, etc."
          }
        },
        "required": [
          "code",
          "message",
          "status",
          "details"
        ]
      },
      "TransitionErrorResponse": {
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidFieldError"
                },
                {
                  "$ref": "#/components/schemas/LimitExceededError"
                }
              ]
            },
            "description": "Transitions."
          }
        }
      },
      "LimitExceededError": {
        "description": "Error schema indicating that a defined limit has been exceeded.",
        "type": "object",
        "properties": {
          "transitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "LIMIT_EXCEEDED"
                  ]
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "api_name": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "string"
                    },
                    "limit_due_to": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "api_name": {
                            "type": "string"
                          },
                          "json_path": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "api_name",
                          "json_path"
                        ]
                      }
                    },
                    "json_path": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "api_name",
                    "limit",
                    "json_path"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                }
              },
              "required": [
                "code",
                "details",
                "message",
                "status"
              ]
            }
          }
        },
        "required": [
          "transitions"
        ]
      },
      "Criteria": {
        "type": "object",
        "properties": {
          "group_operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ],
            "description": "Logical operator (AND/OR) used when defining criteria for multiple fields. This field is required only when more than one condition is grouped."
          },
          "group": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Criteria"
                },
                {
                  "type": "object",
                  "required": [
                    "comparator",
                    "value",
                    "configurable_field"
                  ],
                  "properties": {
                    "comparator": {
                      "type": "string",
                      "description": "Operator used to compare the value of a field (e.g., equal, not_equal)."
                    },
                    "value": {
                      "type": "string",
                      "description": "Value to be compared or logged."
                    },
                    "configurable_field": {
                      "$ref": "#/components/schemas/ConfigurableField"
                    }
                  }
                }
              ]
            },
            "description": "An array of conditions or nested groups. Should be used only when criteria involve multiple fields."
          }
        },
        "description": "Defines conditional logic for triggers or transition criteria. Use a single condition object when only one field is involved. Use 'group_operator' and 'group' when multiple field-based conditions need to be evaluated together."
      },
      "ConfigurableField": {
        "type": "object",
        "required": [
          "id",
          "api_name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the field."
          },
          "api_name": {
            "type": "string",
            "description": "API name of the configurable field."
          }
        },
        "description": "Field reference used in criteria for comparisons."
      },
      "TransitionLogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the log entry."
          },
          "_delete": {
            "type": "boolean",
            "description": "Set true to delete this log entry. Requires 'id'."
          },
          "name": {
            "type": "string",
            "description": "Descriptive name of the log entry."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom",
              "merge"
            ],
            "description": "Type of the log action to be executed. 'merge' supports dynamic value insertion."
          },
          "value": {
            "type": "string",
            "description": "Value associated with the log action. Must match merge pattern if type is 'merge'.",
            "pattern": "\\$\\{(journeys)\\(id=\\d+\\)\\.(configurable_fields)\\(id=\\d+\\)\\}"
          }
        },
        "description": "Log action entry definition."
      },
      "UnifiedTransitionBase": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a transition",
            "pattern": "^[a-zA-Z0-9 ]*$",
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "A brief description about the transition",
            "maxLength": 1000
          },
          "type": {
            "type": "string",
            "enum": [
              "standard",
              "wait"
            ],
            "description": ""
          },
          "from_stage": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the starting stage for this transition. If provided, 'to_stage' must also be specified."
              }
            }
          },
          "to_stage": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the destination stage for this transition. Must be used together with 'from_stage'."
              }
            }
          }
        },
        "description": "Base schema for both Create and Update transitions. Required fields vary by operation."
      },
      "Identifier": {
        "type": "object",
        "description": "Defines identifiers associated with a trigger, used for CRM or synced field mappings. Required fields depend on context.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Required when deleting the identifier (`_delete: true`) or when `type` is `synced_fields`."
          },
          "api_name": {
            "type": "string",
            "description": "API name of the field or object being identified."
          },
          "type": {
            "type": "string",
            "enum": [
              "crm_fields",
              "synced_fields"
            ],
            "description": "The source type of the identifier. Use `synced_fields` for system-synced fields and `crm_fields` for user-defined fields."
          },
          "_delete": {
            "type": "boolean",
            "description": "Set to `true` to delete the identifier. When true, `id` must be provided."
          }
        },
        "required": [
          "api_name",
          "type"
        ]
      }
    },
    "responses": {
      "SuccessResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransitionErrorResponse"
            },
            "examples": {
              "signal_locked": {
                "summary": "Source and destination cannot be changed once signal is configured",
                "value": {
                  "code": "INVALID_DATA",
                  "message": "The Source and Destination cannot be modified once signals are configured",
                  "status": "error",
                  "details": {
                    "api_name": "id",
                    "json_path": "$.transitions[0].from_stage.id"
                  }
                }
              },
              "mandatory_missing": {
                "summary": "A required field is missing",
                "value": {
                  "code": "MANDATORY_NOT_FOUND",
                  "message": "Mandatory field not found",
                  "status": "error",
                  "details": {
                    "api_name": "id",
                    "json_path": "$.transitions[0].details.triggers[0]signal.signal_props.to_module.id"
                  }
                }
              },
              "resource_path_invalid": {
                "summary": "Invalid input at a given index in resource path",
                "value": {
                  "code": "INVALID_DATA",
                  "message": "The given field seems to be invalid",
                  "status": "error",
                  "details": {
                    "resource_path_index": "3"
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "TransitionPayload": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateTransition"
            }
          }
        }
      },
      "UpdateTransitionPayload": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateTransition"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "iam-oauth2-schema": [
        "ZohoCommandCenter.journeys.UPDATE"
      ]
    }
  ]
}
