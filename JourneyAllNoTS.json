{
  "openapi": "3.0.0",
  "info": {
    "title": "Combined Journey API",
    "version": "1.0.0"
  },
  "security": [
    {
      "OAuth2": [
        "ZohoCommandCenter.journeys.ALL"
      ]
    }
  ],
  "paths": {
    "/commandcenter/v1/journeys": {
      "get": {
        "tags": [
          "Journeys"
        ],
        "summary": "Get list of journeys",
        "description": "Retrieves a list of active, draft, and inactive journeys using scope authentication.",
        "operationId": "getJourneys",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetJourneysResponse"
          },
          "204": {
            "description": "No journeys found"
          }
        }
      },
      "post": {
        "tags": [
          "Journeys"
        ],
        "summary": "Create a new journey",
        "description": "Create a journey with configuration for goal, deadline, and initial settings.",
        "operationId": "createJourney",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateJourneyPayload"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/CreateJourneyErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}": {
      "put": {
        "summary": "Update a journey by ID",
        "description": "Updates properties of a specific journey such as name, description, chart data, goal, and deadlines.",
        "operationId": "updateJourney",
        "tags": [
          "Journeys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateJourneyPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/UpdateJourneyErrorResponse"
          }
        }
      },
      "get": {
        "tags": [
          "Journeys"
        ],
        "summary": "Get journey details by ID",
        "description": "Retrieve detailed data for a specific journey including stages, transitions, chart data, goals, deadlines, and action metadata.",
        "operationId": "getJourneyDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          },
          {
            "$ref": "#/components/parameters/IncludeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetJourneyDetailsResponse"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Journeys"
        ],
        "summary": "Delete a journey",
        "description": "Delete a journey by specifying its ID.",
        "operationId": "deleteJourney",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/actions/clone": {
      "post": {
        "tags": [
          "Journeys"
        ],
        "summary": "Clone a journey",
        "description": "Duplicate a journey instead of editing a published one.",
        "operationId": "cloneJourney",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/JourneyActionErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/actions/publish": {
      "post": {
        "summary": "Publish a journey",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/JourneyActionErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/actions/merge": {
      "post": {
        "tags": [
          "Journeys"
        ],
        "summary": "Merge a journey",
        "description": "Merge an edited journey with the original journey by publishing the changes.",
        "operationId": "mergeJourney",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/JourneyActionErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/actions/activate": {
      "post": {
        "tags": [
          "Journeys"
        ],
        "summary": "Activate a journey",
        "description": "Activate a journey that is currently in a deactivated state.",
        "operationId": "activateJourney",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/JourneyActionErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}/actions/deactivate": {
      "post": {
        "tags": [
          "Journeys"
        ],
        "summary": "Deactivate a journey",
        "description": "Pause the execution of a journey by deactivating it.",
        "operationId": "deactivateJourney",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/JourneyActionErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/configurable_fields": {
      "get": {
        "summary": "Get Configurable Fields",
        "operationId": "getConfigurableFields",
        "tags": [
          "Configurable Fields"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConfigurableFieldsResponse"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/Per_pageParam"
          },
          {
            "$ref": "#/components/parameters/FiltersParam"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.zoho.com/oauth/v2/auth",
            "tokenUrl": "https://accounts.zoho.com/oauth/v2/token",
            "scopes": {
              "ZohoCommandCenter.journeys.ALL": "Full access to Journey APIs"
            }
          }
        }
      }
    },
    "parameters": {
      "JourneyId": {
        "name": "journey_id",
        "in": "path",
        "description": "The unique identifier of the journey to update.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "IncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Comma-separated list of additional metadata to include (e.g., stages, transitions)",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "The page number to retrieve",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "Per_pageParam": {
        "name": "per_page",
        "in": "query",
        "description": "Number of records per page",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "FiltersParam": {
        "name": "filters",
        "in": "query",
        "description": "Filter expression to narrow down the results. This string must be URL-encoded before sending in the query. Example filter: {\"field\":{\"api_name\":\"transition\"},\"comparator\":\"equal\",\"value\":\"1000000004349\"}",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "SuccessResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            },
            "examples": {
              "SuccessResponse": {
                "$ref": "#/components/examples/SuccessResponse"
              }
            }
          }
        }
      },
      "CreateJourneyErrorResponse": {
        "description": "One of the possible error responses for journey creation",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataListError"
                },
                {
                  "$ref": "#/components/schemas/DuplicateDataError"
                },
                {
                  "$ref": "#/components/schemas/LimitExceededError"
                },
                {
                  "$ref": "#/components/schemas/MandatoryNotFoundError"
                }
              ]
            },
            "examples": {
              "InvalidDataError": {
                "$ref": "#/components/examples/InvalidDataListError"
              },
              "DuplicateDataError": {
                "$ref": "#/components/examples/DuplicateDataError"
              },
              "LimitExceededError": {
                "$ref": "#/components/examples/LimitExceededError"
              },
              "MandatoryNotFoundError": {
                "$ref": "#/components/examples/MandatoryNotFoundError"
              }
            }
          }
        }
      },
      "UpdateJourneyErrorResponse": {
        "description": "One of the error responses for updating a journey",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataError"
                },
                {
                  "$ref": "#/components/schemas/InvalidDataListError"
                },
                {
                  "$ref": "#/components/schemas/MandatoryNotFoundError"
                },
                {
                  "$ref": "#/components/schemas/DuplicateDataError"
                },
                {
                  "$ref": "#/components/schemas/LimitExceededError"
                },
                {
                  "$ref": "#/components/schemas/NotAllowedError"
                },
                {
                  "$ref": "#/components/schemas/DependentFieldMissingError"
                }
              ]
            },
            "examples": {
              "InvalidDataError": {
                "$ref": "#/components/examples/InvalidDataError"
              },
              "DependentFieldMissingError": {
                "$ref": "#/components/examples/DependentFieldMissingError"
              }
            }
          }
        }
      },
      "GetJourneysResponse": {
        "description": "List of journeys retrieved successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetJourneysResponse"
            },
            "example": {
              "$ref": "#/components/examples/GetJourneysResponse"
            }
          }
        }
      },
      "GetJourneyDetailsResponse": {
        "description": "Single journey with full details or an error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetJourneyDetailsSchema"
            },
            "example": {
              "$ref": "#/components/examples/GetJourneyDetailsResponse"
            }
          }
        }
      },
      "InvalidRequestErrorResponse": {
        "description": "Request payload is invalid or missing required fields",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidDataError"
            },
            "example": {
              "$ref": "#/components/examples/InvalidDataError"
            }
          }
        }
      },
      "JourneyActionErrorResponse": {
        "description": "Invalid data or not allowed action for publishing, cloning, or merging a journey.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataError"
                },
                {
                  "$ref": "#/components/schemas/NotAllowedError"
                }
              ]
            },
            "examples": {
              "InvalidDataError": {
                "$ref": "#/components/examples/InvalidDataError"
              },
              "NotAllowedError": {
                "$ref": "#/components/examples/NotAllowedError"
              }
            }
          }
        }
      },
      "ConfigurableFieldsResponse": {
        "description": "Successful response with configurable fields",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConfigurableFieldsResponse"
            }
          }
        }
      }
    },
    "schemas": {
      "JourneyGoal": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GoalReach"
          },
          {
            "$ref": "#/components/schemas/GoalTimeTaken"
          },
          {
            "$ref": "#/components/schemas/GoalPath"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "reach": "#/components/schemas/GoalReach",
            "time_taken": "#/components/schemas/GoalTimeTaken",
            "path": "#/components/schemas/GoalPath"
          }
        }
      },
      "DeadlineAction": {
        "type": "object",
        "description": "Action triggered at deadline",
        "required": [
          "action",
          "id",
          "details"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Action type",
            "enum": [
              "move_to_stage"
            ]
          },
          "id": {
            "type": "string",
            "description": "Action identifier"
          },
          "details": {
            "$ref": "#/components/schemas/DeadlineActionDetailsMoveToStage"
          }
        }
      },
      "JourneyDeadline": {
        "type": "object",
        "description": "Deadline configuration for the journey",
        "required": [
          "execute_on",
          "stage",
          "actions"
        ],
        "properties": {
          "execute_on": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "stage": {
            "$ref": "#/components/schemas/StageReference"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeadlineAction"
            }
          }
        }
      },
      "GoalDetailsReach": {
        "type": "object",
        "properties": {
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        },
        "required": [
          "stages"
        ]
      },
      "GoalDetailsTimeTaken": {
        "type": "object",
        "required": [
          "reach_within",
          "stages"
        ],
        "properties": {
          "reach_within": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        }
      },
      "GoalDetailsPath": {
        "type": "object",
        "properties": {
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        },
        "required": [
          "stages"
        ]
      },
      "DeadlineActionDetailsMoveToStage": {
        "type": "object",
        "required": [
          "stage"
        ],
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/StageReference"
          }
        }
      },
      "StageReference": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the stage"
          }
        }
      },
      "StageArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StageReference"
        },
        "description": "Array of stage references"
      },
      "TimePeriod": {
        "type": "object",
        "required": [
          "period",
          "time_unit"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "minimum": 1,
            "description": "Numeric value of the time period"
          },
          "time_unit": {
            "type": "string",
            "enum": [
              "minutes",
              "hours",
              "days",
              "weeks"
            ],
            "description": "Unit for the period (e.g., days, hours)"
          }
        }
      },
      "CreateJourneyPayload": {
        "type": "object",
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the journey"
                },
                "description": {
                  "type": "string",
                  "description": "A short description of the journey"
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "required": [
          "journeys"
        ]
      },
      "UpdateJourneyPayload": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the journey"
                },
                "description": {
                  "type": "string",
                  "description": "Brief description of the journey"
                },
                "goal": {
                  "$ref": "#/components/schemas/JourneyGoal"
                },
                "deadline": {
                  "$ref": "#/components/schemas/JourneyDeadline"
                }
              }
            }
          }
        }
      },
      "GoalReach": {
        "type": "object",
        "required": [
          "type",
          "details"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "reach"
            ],
            "description": "Type of goal"
          },
          "details": {
            "$ref": "#/components/schemas/GoalDetailsReach"
          }
        }
      },
      "GoalTimeTaken": {
        "type": "object",
        "required": [
          "type",
          "details"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "time_taken"
            ],
            "description": "Type of goal"
          },
          "details": {
            "$ref": "#/components/schemas/GoalDetailsTimeTaken"
          }
        }
      },
      "GoalPath": {
        "type": "object",
        "required": [
          "type",
          "details"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "path"
            ],
            "description": "Type of goal"
          },
          "details": {
            "$ref": "#/components/schemas/GoalDetailsPath"
          }
        }
      },
      "GetJourneysResponse": {
        "type": "object",
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "created_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "modified_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "created_by": {
                  "$ref": "#/components/schemas/IDAndName"
                },
                "modified_by": {
                  "$ref": "#/components/schemas/IDAndName"
                },
                "cloned_from": {
                  "$ref": "#/components/schemas/IDAndName"
                },
                "records_count": {
                  "type": "integer"
                },
                "group_id": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "GetJourneyDetailsSchema": {
        "type": "object",
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Detailed journey object with nested metadata (stages, transitions, etc.)",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "created_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "modified_time": {
                  "type": "string",
                  "format": "date-time"
                },
                "record_condition": {
                  "type": "boolean"
                },
                "chart_data": {
                  "type": "object"
                },
                "created_by": {
                  "type": "object"
                },
                "modified_by": {
                  "type": "object"
                },
                "cloned_from": {
                  "type": "object"
                },
                "records_count": {
                  "type": "integer"
                },
                "group_id": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                },
                "goal": {
                  "$ref": "#/components/schemas/JourneyGoal"
                },
                "deadline": {
                  "$ref": "#/components/schemas/JourneyDeadline"
                },
                "transitions": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "ConfigurableField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the resource."
          },
          "name": {
            "type": "string",
            "description": "Name or display name of the resource."
          },
          "transition": {
            "$ref": "#/components/schemas/IDAndName"
          },
          "trigger": {
            "$ref": "#/components/schemas/IDAndName"
          },
          "signal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IDAndName"
              },
              {
                "type": "object",
                "properties": {
                  "api_name": {
                    "type": "string",
                    "description": "API name used to identify the field programmatically."
                  }
                },
                "description": "Signal associated with the configuration."
              }
            ]
          },
          "api_name": {
            "type": "string",
            "description": "API name used to identify the field programmatically."
          },
          "ui_type": {
            "type": "integer",
            "description": "UI type used for rendering the field."
          },
          "data_type": {
            "type": "string",
            "description": "Data type of the configurable field."
          }
        }
      },
      "ConfigurableFieldsResponse": {
        "type": "object",
        "properties": {
          "configurable_fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurableField"
            }
          },
          "info": {
            "$ref": "#/components/schemas/PaginationInfo"
          }
        },
        "content": {
          "application/json": {
            "example": {
              "$ref": "#/components/examples/GetConfigurableFieldsResponse"
            }
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "resource_path_index": {
            "type": "string",
            "description": "Index of the resource in the input array where the error occurred."
          }
        },
        "required": [
          "resource_path_index"
        ]
      },
      "PaginationInfo": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number in the paginated response."
          },
          "count": {
            "type": "integer",
            "description": "Number of records returned in the current page."
          },
          "per_page": {
            "type": "integer",
            "description": "Maximum number of records per page."
          },
          "more_records": {
            "type": "boolean",
            "description": "Indicates if more records are available beyond the current page."
          }
        }
      },
      "IDAndName": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Display name"
          }
        }
      }
    },
    "requestBodies": {
      "CreateJourneyPayload": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateJourneyPayload"
            },
            "example": {
              "$ref": "#/components/examples/CreateJourneyPayload"
            }
          }
        }
      },
      "UpdateJourneyPayload": {
        "description": "Payload to update an existing journey",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateJourneyPayload"
            },
            "example": {
              "$ref": "#/components/examples/UpdateJourneyPayload"
            }
          }
        }
      }
    },
    "examples": {}
  },
  "servers": [
    {
      "url": "https://commandcenter.zoho.com"
    }
  ]
}
