{
  "openapi": "3.0.0",
  "info": {
    "title": "Combined Journey API",
    "version": "1.0.0"
  },
  "security": [
    {
      "OAuth2": [
        "ZohoCommandCenter.journeys.ALL"
      ]
    }
  ],
  "paths": {
    "/journeys": {
      "post": {
        "summary": "Create a journey",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateJourneyPayload"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/CreateJourneyErrorResponse"
          }
        }
      }
    },
    "/journeys/{journey_id}/publish": {
      "post": {
        "summary": "Publish a journey",
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/PublishJourneyErrorResponse"
          }
        }
      }
    },
    "/commandcenter/v1/journeys/{journey_id}": {
      "put": {
        "summary": "Update a journey by ID",
        "description": "Updates properties of a specific journey such as name, description, chart data, goal, and deadlines.",
        "operationId": "updateJourney",
        "tags": [
          "Journeys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/JourneyId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateJourneyPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/UpdateJourneyErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.zoho.com/oauth/v2/auth",
            "tokenUrl": "https://accounts.zoho.com/oauth/v2/token",
            "scopes": {
              "ZohoCommandCenter.journeys.ALL": "Full access to Journey APIs"
            }
          }
        }
      }
    },
    "parameters": {
      "JourneyId": {
        "name": "journey_id",
        "in": "path",
        "description": "The unique identifier of the journey to update.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "SuccessResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            },
            "example": {
              "journeys": [
                {
                  "code": "SUCCESS",
                  "details": {
                    "id": "1000000007733"
                  },
                  "message": "Journey created successfully",
                  "status": "success"
                }
              ]
            }
          }
        }
      },
      "CreateJourneyErrorResponse": {
        "description": "One of the possible error responses for journey creation",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataListError"
                },
                {
                  "$ref": "#/components/schemas/DuplicateDataError"
                },
                {
                  "$ref": "#/components/schemas/LimitExceededError"
                },
                {
                  "$ref": "#/components/schemas/MandatoryNotFoundError"
                }
              ]
            }
          }
        }
      },
      "PublishJourneyErrorResponse": {
        "description": "One of the possible error responses for journey publishing",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataError"
                },
                {
                  "$ref": "#/components/schemas/NotAllowedError"
                }
              ]
            }
          }
        }
      },
      "UpdateJourneyErrorResponse": {
        "description": "One of the error responses for updating a journey",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/InvalidDataError"
                },
                {
                  "$ref": "#/components/schemas/InvalidDataListError"
                },
                {
                  "$ref": "#/components/schemas/MandatoryNotFoundError"
                },
                {
                  "$ref": "#/components/schemas/DuplicateDataError"
                },
                {
                  "$ref": "#/components/schemas/LimitExceededError"
                },
                {
                  "$ref": "#/components/schemas/NotAllowedError"
                },
                {
                  "$ref": "#/components/schemas/DependentFieldMissingError"
                }
              ]
            }
          }
        }
      }
    },
    "schemas": {
      "InvalidDataError": {
        "type": "object",
        "required": [
          "code",
          "message",
          "details",
          "status"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "INVALID_DATA"
            ],
            "description": "A short machine-readable code indicating the outcome or error type."
          },
          "message": {
            "type": "string",
            "description": "Human-readable description explaining the status or error."
          },
          "details": {
            "$ref": "#/components/schemas/FlatErrorDetails"
          },
          "status": {
            "type": "string",
            "enum": [
              "error"
            ],
            "description": "The status of the response: success or error."
          }
        },
        "example": {
          "code": "INVALID_DATA",
          "message": "The given field seems to be invalid",
          "details": {
            "resource_path_index": "1"
          },
          "status": "error"
        }
      },
      "InvalidDataListError": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "INVALID_DATA"
                  ],
                  "description": "A short machine-readable code indicating the outcome or error type."
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable description explaining the status or error."
                },
                "details": {
                  "$ref": "#/components/schemas/CommonErrorDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "The status of the response: success or error."
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "example": {
          "journeys": [
            {
              "code": "INVALID_DATA",
              "message": "The given field is of an invalid data type",
              "details": {
                "api_name": "name",
                "json_path": "$.journeys[0].name"
              },
              "status": "error"
            }
          ]
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "INVALID_DATA"
                  ],
                  "description": "A short machine-readable code indicating the outcome or error type."
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable description explaining the status or error."
                },
                "details": {
                  "$ref": "#/components/schemas/SuccessDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "The status of the response: success or error."
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "example": {
          "journeys": [
            {
              "code": "SUCCESS",
              "details": {
                "id": "1000000007733"
              },
              "message": "Journey created successfully",
              "status": "success"
            }
          ]
        }
      },
      "DuplicateDataError": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "INVALID_DATA"
                  ],
                  "description": "A short machine-readable code indicating the outcome or error type."
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable description explaining the status or error."
                },
                "details": {
                  "$ref": "#/components/schemas/CommonErrorDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "The status of the response: success or error."
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "example": {
          "journeys": [
            {
              "code": "DUPLICATE_DATA",
              "message": "Journey with the same name already exists.",
              "details": {
                "api_name": "name",
                "json_path": "$.journeys[0].name"
              },
              "status": "error"
            }
          ]
        }
      },
      "LimitExceededError": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "INVALID_DATA"
                  ],
                  "description": "A short machine-readable code indicating the outcome or error type."
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable description explaining the status or error."
                },
                "details": {
                  "$ref": "#/components/schemas/LimitExceededDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "The status of the response: success or error."
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "example": {
          "journeys": [
            {
              "code": "LIMIT_EXCEEDED",
              "message": "Total journey creation limit exists for this org, please upgrade your license to create more.",
              "details": {
                "api_name": "journeys",
                "limit": "5",
                "json_path": "$.journeys[0].journeys"
              },
              "status": "error"
            }
          ]
        }
      },
      "MandatoryNotFoundError": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "INVALID_DATA"
                  ],
                  "description": "A short machine-readable code indicating the outcome or error type."
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable description explaining the status or error."
                },
                "details": {
                  "$ref": "#/components/schemas/CommonErrorDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "The status of the response: success or error."
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "example": {
          "journeys": [
            {
              "code": "MANDATORY_NOT_FOUND",
              "message": "Mandatory field not found",
              "details": {
                "api_name": "name",
                "json_path": "$.journeys[0].name"
              },
              "status": "error"
            }
          ]
        }
      },
      "NotAllowedError": {
        "type": "object",
        "required": [
          "code",
          "message",
          "status",
          "details"
        ],
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "NOT_ALLOWED"
            ],
            "description": "A short machine-readable code indicating the outcome or error type."
          },
          "message": {
            "type": "string",
            "description": "Human-readable description explaining the status or error."
          },
          "status": {
            "type": "string",
            "enum": [
              "error"
            ],
            "description": "The status of the response: success or error."
          },
          "details": {
            "$ref": "#/components/schemas/FlatErrorDetails"
          }
        },
        "example": {
          "code": "NOT_ALLOWED",
          "message": "Journey doesn't have any transitions, a journey should have at least an transition, please check and configure.",
          "details": {
            "resource_path_index": "1"
          },
          "status": "error"
        }
      },
      "DependentFieldMissingError": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code",
                "message",
                "details",
                "status"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "DEPENDENT_FIELD_MISSING"
                  ],
                  "description": "Error code indicating a required dependent field is missing."
                },
                "message": {
                  "type": "string",
                  "description": "Error message indicating what is missing."
                },
                "details": {
                  "$ref": "#/components/schemas/DependentFieldMissingDetails"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error"
                  ],
                  "description": "Error status."
                }
              }
            }
          }
        },
        "example": {
          "journeys": [
            {
              "code": "DEPENDENT_FIELD_MISSING",
              "details": {
                "dependee": {
                  "api_name": "stages",
                  "json_path": "goal.details"
                },
                "api_name": "type",
                "json_path": "$.journeys[0].goal.type"
              },
              "message": "The dependent field is missing from the request.",
              "status": "error"
            }
          ]
        }
      },
      "CommonErrorDetails": {
        "type": "object",
        "required": [
          "api_name",
          "json_path"
        ],
        "properties": {
          "api_name": {
            "type": "string",
            "description": "The name of the API field causing the issue."
          },
          "json_path": {
            "type": "string",
            "description": "The JSON path in the payload where the issue was found."
          }
        }
      },
      "LimitExceededDetails": {
        "type": "object",
        "required": [
          "api_name",
          "json_path",
          "limit"
        ],
        "properties": {
          "api_name": {
            "type": "string",
            "description": "The name of the API field causing the issue."
          },
          "json_path": {
            "type": "string",
            "description": "The JSON path in the payload where the issue was found."
          },
          "limit": {
            "type": "string",
            "description": "The maximum allowed limit that was exceeded."
          }
        }
      },
      "FlatErrorDetails": {
        "type": "object",
        "required": [
          "resource_path_index"
        ],
        "properties": {
          "resource_path_index": {
            "type": "string",
            "description": "The index of the problematic resource in the input array."
          }
        }
      },
      "SuccessDetails": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the created or affected resource."
          }
        }
      },
      "DependentFieldMissingDetails": {
        "type": "object",
        "required": [
          "api_name",
          "json_path",
          "dependee"
        ],
        "properties": {
          "api_name": {
            "type": "string",
            "description": "The field with dependency."
          },
          "json_path": {
            "type": "string",
            "description": "JSON path to the dependent field."
          },
          "dependee": {
            "type": "object",
            "required": [
              "api_name",
              "json_path"
            ],
            "properties": {
              "api_name": {
                "type": "string",
                "description": "The missing dependent field name."
              },
              "json_path": {
                "type": "string",
                "description": "JSON path of the missing field."
              }
            }
          }
        }
      },
      "JourneyGoal": {
        "type": "object",
        "description": "Goal configuration for the journey",
        "required": [
          "type",
          "details"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of goal (e.g., reach, time_taken)",
            "enum": [
              "time_taken",
              "reach",
              "path"
            ]
          },
          "details": {
            "oneOf": [
              {
                "title": "GoalDetailsReach",
                "description": "Details for reach goal",
                "$ref": "#/components/schemas/GoalDetailsReach"
              },
              {
                "title": "GoalDetailsTimeTaken",
                "description": "Details for time_taken goal",
                "$ref": "#/components/schemas/GoalDetailsTimeTaken"
              },
              {
                "title": "GoalDetailsPath",
                "description": "Details for path goal",
                "$ref": "#/components/schemas/GoalDetailsPath"
              }
            ]
          }
        },
        "oneOf": [
          {
            "title": "GoalReach",
            "description": "Reach a specific stage",
            "required": [
              "type",
              "details"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "reach"
                ],
                "description": "Must be 'reach'"
              },
              "details": {
                "$ref": "#/components/schemas/GoalDetailsReach"
              }
            }
          },
          {
            "title": "GoalTimeTaken",
            "description": "Reach stage within time",
            "required": [
              "type",
              "details"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "time_taken"
                ],
                "description": "Must be 'time_taken'"
              },
              "details": {
                "$ref": "#/components/schemas/GoalDetailsTimeTaken"
              }
            }
          },
          {
            "title": "GoalPath",
            "description": "Reach stages in specific order",
            "required": [
              "type",
              "details"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "path"
                ],
                "description": "Must be 'path'"
              },
              "details": {
                "$ref": "#/components/schemas/GoalDetailsPath"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "reach": "#/components/schemas/GoalDetailsReach",
            "time_taken": "#/components/schemas/GoalDetailsTimeTaken",
            "path": "#/components/schemas/GoalDetailsPath"
          }
        }
      },
      "DeadlineAction": {
        "type": "object",
        "description": "Action triggered at deadline",
        "required": [
          "action",
          "id",
          "details"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "Action type",
            "enum": [
              "move_to_stage"
            ]
          },
          "id": {
            "type": "string",
            "description": "Action identifier"
          },
          "details": {
            "$ref": "#/components/schemas/DeadlineActionDetailsMoveToStage"
          }
        }
      },
      "JourneyDeadline": {
        "type": "object",
        "description": "Deadline configuration for the journey",
        "required": [
          "execute_on",
          "stage",
          "actions"
        ],
        "properties": {
          "execute_on": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "stage": {
            "$ref": "#/components/schemas/StageReference"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeadlineAction"
            }
          }
        }
      },
      "GoalDetailsReach": {
        "type": "object",
        "properties": {
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        },
        "required": [
          "stages"
        ]
      },
      "GoalDetailsTimeTaken": {
        "type": "object",
        "required": [
          "reach_within",
          "stages"
        ],
        "properties": {
          "reach_within": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        }
      },
      "GoalDetailsPath": {
        "type": "object",
        "properties": {
          "stages": {
            "$ref": "#/components/schemas/StageArray"
          }
        },
        "required": [
          "stages"
        ]
      },
      "DeadlineActionDetailsMoveToStage": {
        "type": "object",
        "required": [
          "stage"
        ],
        "properties": {
          "stage": {
            "$ref": "#/components/schemas/StageReference"
          }
        }
      },
      "DeadlineExecuteOn": {
        "type": "object",
        "required": [
          "period",
          "time_unit"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "minimum": 1,
            "description": "Period after which deadline is triggered"
          },
          "time_unit": {
            "type": "string",
            "enum": [
              "minutes",
              "hours",
              "days",
              "weeks"
            ],
            "description": "Unit of time for the period"
          }
        }
      },
      "StageReference": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the stage"
          }
        }
      },
      "StageArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StageReference"
        },
        "description": "Array of stage references"
      },
      "TimePeriod": {
        "type": "object",
        "required": [
          "period",
          "time_unit"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "minimum": 1,
            "description": "Numeric value of the time period"
          },
          "time_unit": {
            "type": "string",
            "enum": [
              "minutes",
              "hours",
              "days",
              "weeks"
            ],
            "description": "Unit for the period (e.g., days, hours)"
          }
        }
      },
      "CreateJourneyPayload": {
        "type": "object",
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the journey"
                },
                "description": {
                  "type": "string",
                  "description": "A short description of the journey"
                }
              }
            },
            "description": "List of journey-level responses or results."
          }
        },
        "required": [
          "journeys"
        ]
      },
      "UpdateJourneyPayload": {
        "type": "object",
        "required": [
          "journeys"
        ],
        "properties": {
          "journeys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the journey"
                },
                "description": {
                  "type": "string",
                  "description": "Brief description of the journey"
                },
                "goal": {
                  "$ref": "#/components/schemas/JourneyGoal"
                },
                "deadline": {
                  "$ref": "#/components/schemas/JourneyDeadline"
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "CreateJourneyPayload": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateJourneyPayload"
            },
            "example": {
              "journeys": [
                {
                  "name": "JJ1",
                  "description": "A valid one"
                }
              ]
            }
          }
        }
      },
      "UpdateJourneyPayload": {
        "description": "Payload to update an existing journey",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateJourneyPayload"
            },
            "example": {
              "journeys": [
                {
                  "name": "A Journey",
                  "description": "a brief one",
                  "deadline": {
                    "execute_on": {
                      "period": 5,
                      "time_unit": "days"
                    },
                    "stage": {
                      "id": "null"
                    },
                    "actions": [
                      {
                        "action": "move_to_stage",
                        "id": "1000000024660",
                        "details": {
                          "stage": {
                            "id": "1000000024640"
                          }
                        }
                      }
                    ]
                  },
                  "goal": {
                    "type": "reach",
                    "details": {
                      "stages": [
                        {
                          "id": "1000000024640"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
}
